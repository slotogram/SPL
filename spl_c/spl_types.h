#ifndef _SPL_TYPES_
#define _SPL_TYPES_

///
/// \file  spl_types.h
/// \brief Типы данных и структуры библиотеки SPL.
///

#include "common.h"

namespace spl {

/// Тип чисел, представляющих частоту (в т.ч. частоту дискретизации).
typedef double freq_t;

/// Тип числа в сигнале. 
/// По умолчанию вещественные числа двойной точности (double).
typedef double signal_t;

/// Тип числа в спектре. 
/// По умолчанию вещественные числа двойной точности (double).
typedef double spectrum_t;

/// Тип числа в маске.
/// По умолчанию булево.
typedef bool mask_t;

///
/// Звуковой сигнал.
///
/// Звуковой сигнал представляет собой массив чисел (отсчетов), обозначающих 
///  звуковое давление. Каждому отсчету сопоставлено определенное время 
///  воспроизведения, определяемое частотой дискретизации F.
///

struct signal {

	/// Количество отсчетов в спектре.
	/// Параметр сигнала.
	int N;

	/// Частота дискретизации.
	/// Параметр сигнала.
	freq_t F;

	/// Собственно сигнал.
	signal_t *X;	

};

///
/// Шкала резонансных частот нерекурсивных фильтров.
///
/// Шкала резонансных частот (шкала) - это основной параметр системы фильтров, 
///  который и передается в библиотеку для фильтрации сигнала.
/// 
/// Шкала представляет из себя обычный массив частот.
/// Частоты в шкале убывают: чем больше номер канала, тем ниже частота.
/// 

struct freq_scale {

	/// Количество каналов фильтрации.
	int K;

	/// Массив резонансных частот фильтров.
	freq_t *Fr;

};

/// Спектр звукового сигнала.

struct spectrum {

	/// Количество каналов фильтрации.
	int K; 

	/// Количество отсчетов в спектре.
	int N; 

	/// Частота дискретизации.
	freq_t F;

	/// Собственно спектр.
	/// Спектр представляет из себя матрицу размера N x K.
	/// Таким образом, внешней размерностью являются отсчеты, 
	///  что позволяет вычислять спектр потоковых сигналов.
	spectrum_t *Y;

};

/// Маска звукового сигнала
struct mask {

	/// Количество каналов фильтрации.
	int K; 

	/// Количество отсчетов в маске.
	int N;

	/// Собственно маска.
	/// Маска представляет из себя матрицу размера N x K.
	/// Каждый элемент маски может принимать два значения: 0 или 1.
	mask_t *Z;

};


} // namespace spl 

#endif//_SPL_TYPES_
